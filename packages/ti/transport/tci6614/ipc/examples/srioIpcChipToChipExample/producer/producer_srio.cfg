/* --COPYRIGHT--,BSD
 * Copyright (c) 2011, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/

/* Benchmark Task */
var Task = xdc.useModule('ti.sysbios.knl.Task'); 
var tskParams = new Task.Params;
tskParams.instance.name = "tsk0";
Program.global.task0 = Task.create('&tsk0', tskParams);  

var Semaphore     = xdc.useModule('ti.sysbios.knl.Semaphore');
Semaphore.supportsEvents = false;

var Agent = xdc.useModule('ti.sysbios.rta.Agent');
Agent.transport = Agent.Transport_STOP_MODE_ONLY;
 
var Load = xdc.useModule('ti.sysbios.utils.Load');
Load.hwiEnabled = false;
Load.swiEnabled = false; 
Load.taskEnabled = false;

var System   = xdc.useModule('xdc.runtime.System');
var Startup   =   xdc.useModule('xdc.runtime.Startup');
var SysStd   = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;

System.extendedFormats = "%f";

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.clockEnabled = true;
BIOS.heapSize = 0x8000;

/* QMSS/CPPI memory settings */

/* Load and use the CPPI, QMSS, and SRIO packages */
var Cppi = xdc.loadPackage('ti.drv.cppi'); 
var Qmss = xdc.loadPackage('ti.drv.qmss');
var Srio = xdc.loadPackage('ti.drv.srio');

/* BEGIN QMSS/CPPI/SRIO memory settings */
Program.sectMap[".qmss"] = new Program.SectionSpec();
Program.sectMap[".qmss"] = "MSMCSRAM";

Program.sectMap[".cppi"] = new Program.SectionSpec();
Program.sectMap[".cppi"] = "MSMCSRAM";

Program.sectMap[".cppi_heap"] = new Program.SectionSpec();
Program.sectMap[".cppi_heap"] = "MSMCSRAM";

Program.sectMap[".desc"] = new Program.SectionSpec();
Program.sectMap[".desc"] = "MSMCSRAM";

Program.sectMap[".srioSharedMem"] = new Program.SectionSpec();
Program.sectMap[".srioSharedMem"] = "MSMCSRAM";

Program.sectMap["platform_lib"] = new Program.SectionSpec();
Program.sectMap["platform_lib"] = "L2SRAM";
/* END QMSS/CPPI/SRIO memory settings */

var PlatformLib = xdc.loadPackage('ti.platform.evmtci6614');

/* Register an EVM Init handler with BIOS. This will initialize the hardware. BIOS calls before it starts. 
  *
  * If debugging with CCS, then this function will execute as CCS loads it if the option in your 
  * Target Configuration file (.ccxml) has the option set to execute all code before Main. That is the 
  * default. */
Startup.firstFxns.$add('&initPlatform');

var cslSettings = xdc.useModule ('ti.csl.Settings');

var cacheEnabled = true;  
var cacheLineSize = 128;
var procName = null;
var procNameList = [];

var Settings = xdc.useModule('ti.sdo.ipc.family.Settings');
var Cache = xdc.useModule("ti.sysbios.family.c66.Cache");
var MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');
var NameServerMessageQ = xdc.useModule('ti.sdo.ipc.nsremote.NameServerMessageQ');
NameServerMessageQ.timeoutInMicroSecs = 1000000; /* 1 sec */
NameServerMessageQ.heapId = 0; /* Use application heap */
var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');
var TransportSrio = xdc.useModule('ti.transport.ipc.srio.transports.TransportSrio');

/* Set SRIO as the transport */
MessageQ.SetupTransportProxy = xdc.useModule(Settings.getMessageQSetupDelegate());
var TransportSrioSetup = xdc.useModule('ti.transport.ipc.srio.transports.TransportSrioSetup');
MessageQ.SetupTransportProxy = TransportSrioSetup;

TransportSrioSetup.messageQHeapId = 1;  /* Sized specifically to handle receive side packets.  Heap should
                                                                 * not be used by any other application or module */
TransportSrioSetup.descMemRegion = 0;
TransportSrioSetup.numRxDescBuffs = 256;  /* Should be sized large enough so that multiple
                                                                   * packets can be queued on receive side and still
                                                                   * have buffs available for incoming packets */

Program.global.cppiHeapSize = 1024;
Program.global.numDescriptors = 256;
Program.global.descriptorSize = cacheLineSize; // multiple of cache line size 
Program.global.srioMtuSize = 256;
Program.global.SrioGarbageQ = 906;
Program.global.appMsgQHeapId = 0;  /* Can't be the same as TransportSrioSetup.messageQHeapId */
Program.global.descriptorMemRegion = TransportSrioSetup.descMemRegion;

TransportSrio.srioMaxMtuSizeBytes = Program.global.srioMtuSize;
TransportSrio.accuHiPriListSize = 1100;  // this number should be >= twice the threshold+2
TransportSrio.srioNumTxDescriptors = 4;
TransportSrio.srioNumRxDescriptors = 4;
TransportSrio.numTxDescToCleanUp = 2;
TransportSrio.descriptorSize = Program.global.descriptorSize;
TransportSrio.srioGarbageQ = Program.global.SrioGarbageQ;

/* Begin SRIO core array configuration */
TransportSrio.srioMaxNumSystemCores = 4;

Program.global.Srio16BitDeviceId1 = 0xBEEF
Program.global.Srio16BitDeviceId2 = 0x4560
Program.global.Srio16BitDeviceId3 = 0x1234
Program.global.Srio16BitDeviceId4 = 0x5678
Program.global.Srio8BitDeviceId1 = 0xAB
Program.global.Srio8BitDeviceId2 = 0xCD
Program.global.Srio8BitDeviceId3 = 0x12
Program.global.Srio8BitDeviceId4 = 0x56

TransportSrio.srioCoreTT.length = TransportSrio.srioMaxNumSystemCores;
TransportSrio.srioCoreTT[0] = 0;
TransportSrio.srioCoreTT[1] = 0;
TransportSrio.srioCoreTT[2] = 0;
TransportSrio.srioCoreTT[3] = 0;

TransportSrio.srioCoreDeviceId.length = TransportSrio.srioMaxNumSystemCores;
TransportSrio.srioCoreDeviceId[0] = Program.global.Srio8BitDeviceId1;
TransportSrio.srioCoreDeviceId[1] = Program.global.Srio8BitDeviceId1;
TransportSrio.srioCoreDeviceId[2] = Program.global.Srio8BitDeviceId2;
TransportSrio.srioCoreDeviceId[3] = Program.global.Srio8BitDeviceId2;

TransportSrio.srioCoreMailbox.length = TransportSrio.srioMaxNumSystemCores;
TransportSrio.srioCoreMailbox[0] = 0;
TransportSrio.srioCoreMailbox[1] = 0;
TransportSrio.srioCoreMailbox[2] = 0;
TransportSrio.srioCoreMailbox[3] = 0;

TransportSrio.srioCoreLetter.length = TransportSrio.srioMaxNumSystemCores;
TransportSrio.srioCoreLetter[0] = 0;
TransportSrio.srioCoreLetter[1] = 1;
TransportSrio.srioCoreLetter[2] = 0;
TransportSrio.srioCoreLetter[3] = 1;

TransportSrio.srioCoreSegMap.length = TransportSrio.srioMaxNumSystemCores;
TransportSrio.srioCoreSegMap[0] = 0;
TransportSrio.srioCoreSegMap[1] = 0;
TransportSrio.srioCoreSegMap[2] = 0;
TransportSrio.srioCoreSegMap[3] = 0;
/* End SRIO core array configuration */

switch (Program.platformName) 
{                                                                   
    case "ti.platforms.evm6614":    
        Program.global.USING_TCI6614 = 1;    
        procNameList = ["CORE0", "CORE1"];
        Program.global.shmBase = 0x0C000000;
        Program.global.shmSize = 0x00050000; /* Sized for greater than 2000 128 byte messageQ messages */
        break;
    default:
        throw("Unsupported platform: " + Program.platformName);
}
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
/* baseIdOfCluster and numProcessors must be set BEFORE setConfig is run */
MultiProc.baseIdOfCluster = 0;
MultiProc.numProcessors = TransportSrio.srioMaxNumSystemCores;
MultiProc.setConfig(procName, procNameList);

/* Used in application to form remote chip's core names */
Program.global.remoteChipClusterBase = 2;

Program.global.DEVICENAME = Program.cpu.deviceName;
Program.global.PROCNAMES = procNameList.join(",");
Program.global.BUILDPROFILE = Program.build.profile;

/* HeapBufMP tied to shared region.  When a messageQ alloc is called it will alloc
  * a HeapBufMP buffer from the shared region.  Must be done for alloc in TransportSrio_isr. */
var HeapBufMP   = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.translate = false;
SharedRegion.setEntryMeta(0,
    { base: Program.global.shmBase, 
      len: Program.global.shmSize,
      ownerProcId: 0,  /* Needs to be global core ID */
      isValid: true,
      cacheEnable: cacheEnabled,
      cacheLineSize: cacheLineSize,  /* Aligns allocated messages to a cache line */
      name: "internal_shared_mem",
    });


/* Optimization stuff */
Diags = xdc.useModule("xdc.runtime.Diags");
var Defaults = xdc.useModule('xdc.runtime.Defaults');

//Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
Defaults.common$.logger = null;

var Semaphore     = xdc.useModule('ti.sysbios.knl.Semaphore');
Semaphore.supportsEvents = false;

