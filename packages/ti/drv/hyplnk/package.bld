/******************************************************************************
 * FILE PURPOSE: Build description for the hyplnk LLD Package
 ******************************************************************************
 * FILE NAME: package.bld
 *
 * DESCRIPTION: 
 *  This file contains the build specification and description for hyplnk LLD
 *  
 *  The file takes the following parameters from the command line through the
 *  XDCARGS variable.
 *      XDCARGS[0] = hyplnk LLD Install Type 
 *      Valid Values are "TAR" or "SETUP"
 *      DEFAULT is "SETUP"
 *
 *  Example for a valid command:
 *      xdc XDCARGS="SETUP" release  
 *
 * Copyright (C) 2012, Texas Instruments, Inc.
 *****************************************************************************/

/* List of all subdirectories that combine to make the hyplnk LLD Package. */
var subDirectories = [ "src", "docs", "example" , "device"];

var hyplnkLldInstallType;

/* Check if we need to create the Makefiles? */
var miniBuild = java.lang.System.getenv("MINI_PACKAGE");

/* Determine if we need to create the InstallJammer Application or not? 
 * hyplnk LLD Deliverables be either of the following formats:
 *  - TAR Ball Package
 *  - Setup Executable 
 * DEFAULT is a SETUP Executable. */

if ((arguments[0] != "TAR") && (arguments[0] != "SETUP"))
    hyplnklldInstallType = "TAR";
else
    hyplnklldInstallType = arguments[0];

/* Irrespective of the InstallType we always create a TAR Ball Package as a part
 * of the RTSC Build. Here we determine the name of the TAR Ball Package
 *  Format is as follows:
 *      hyplnklld_<version> */
var hyplnklldRTSCFileName = "hyplnklld" + "_" + 
                            hyplnklldPartNumber + "_" +
                            hyplnklldReleaseVersion[0] + "_" +  
                            hyplnklldReleaseVersion[1] + "_" + 
                            hyplnklldReleaseVersion[2]  + "_" + 
                            hyplnklldReleaseVersion[3];

/******************************************************************
 ************************ Release Banner **************************
 ******************************************************************/

print ("************* hyplnk LLD Build Information *************");
print ("hyplnk LLD Install         : " + hyplnklldInstallType);
print ("hyplnk LLD Version         : " + hyplnklldReleaseVersion);
print ("Tools Directory            : " + toolsBaseDir);
print ("RTSC File Name	           : " + hyplnklldRTSCFileName);
print ("hyplnk LLD Path            : " + hyplnklldPath);
print ("C66 LE opts                : " + C66LE.ccOpts.prefix);
print ("***********************************************************");

/* Create the release package for the hyplnk LLD */
Pkg.defaultRelease = Pkg.addRelease (hyplnklldRTSCFileName, {prefix: "./packages/"});

/* Moving forward we need to set the Archiver of the package to be ZIP. This is currently
 * not supported in the XDC tools being used. Currenly builds need to be done with the 
 * following options:-
 *   xdc MK_FIXLISTOPTS=-t release 
 * ZIP is a better option as it works natively with INSTALL Jammer and we can remove the
 * uncompression into a temporary directory. XDC Tools with xdc-rXX support the ZIP archiver. */
//Pkg.attrs = {archiver : "zip"};

/* Cycle through all the sub-directories and build all the files */
for (var i = 0; i < subDirectories.length; i++) 
{
    /* Load the capsule in the sub directory. */
    var caps = xdc.loadCapsule (subDirectories[i]+"/Module.xs");

    print ("Building directory " + subDirectories[i]);

    /* Build the capsule. */
    caps.modBuild();

    /* Package the module.xs files for building via package */
    Pkg.otherFiles[Pkg.otherFiles.length++] = subDirectories[i]+"/Module.xs";
}

/* Package the remaining files */
Pkg.otherFiles[Pkg.otherFiles.length++] = "config.bld";
Pkg.otherFiles[Pkg.otherFiles.length++] = "package.bld";
Pkg.otherFiles[Pkg.otherFiles.length++] = "package.xdc";
Pkg.otherFiles[Pkg.otherFiles.length++] = "package.xs";
Pkg.otherFiles[Pkg.otherFiles.length++] = "Settings.xdc";
Pkg.otherFiles[Pkg.otherFiles.length++] = "Settings.xdc.xdt";
Pkg.otherFiles[Pkg.otherFiles.length++] = "hyplnk.h";
Pkg.otherFiles[Pkg.otherFiles.length++] = "hyplnk_cfg.h";
Pkg.otherFiles[Pkg.otherFiles.length++] = "hyplnkver.h";
Pkg.otherFiles[Pkg.otherFiles.length++] = "hyplnkver.h.xdt";
Pkg.otherFiles[Pkg.otherFiles.length++] = "src/hyplnkloc.h";
Pkg.otherFiles[Pkg.otherFiles.length++] = "docs/Doxyfile";
Pkg.otherFiles[Pkg.otherFiles.length++] = "docs/doxyfile.xdt";
Pkg.otherFiles[Pkg.otherFiles.length++] = "build/buildlib.xs";
Pkg.otherFiles[Pkg.otherFiles.length++] = "makefile";
Pkg.otherFiles[Pkg.otherFiles.length++] = "makefile_armv7";
Pkg.otherFiles[Pkg.otherFiles.length++] = "build/armv7/libhyplnk_aearmv7.mk";
Pkg.otherFiles[Pkg.otherFiles.length++] = "example/memoryMappedExample/k2h/armv7/linux/build/makefile";
Pkg.otherFiles[Pkg.otherFiles.length++] = "example/memoryMappedExample/k2k/armv7/linux/build/makefile";
Pkg.otherFiles[Pkg.otherFiles.length++] = "example/memoryMappedExample/k2e/armv7/linux/build/makefile";
Pkg.otherFiles[Pkg.otherFiles.length++] = "example/cicInterruptExample/k2h/armv7/linux/build/makefile";
Pkg.otherFiles[Pkg.otherFiles.length++] = "example/cicInterruptExample/k2k/armv7/linux/build/makefile";
Pkg.otherFiles[Pkg.otherFiles.length++] = "example/cicInterruptExample/k2e/armv7/linux/build/makefile";

/* Generate Users Manual Doxyfile */
var tplt = xdc.loadTemplate("./docs/doxyfile.xdt");
tplt.genFile("./docs/Doxyfile",hyplnklldReleaseVersion); 

/* Generate Settings.xdc */
var tplt = xdc.loadTemplate("./Settings.xdc.xdt");
tplt.genFile("./Settings.xdc",hyplnklldReleaseVersion); 

/* Generate paver.h */
var tplt = xdc.loadTemplate("./hyplnkver.h.xdt");
tplt.genFile("./hyplnkver.h",hyplnklldReleaseVersion);      

    
