/******************************************************************************
 *
 * Copyright (C) 2012-2019 Cadence Design Systems, Inc.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************
 *
 * dp_hdcp.h
 *
 ******************************************************************************
 */

#ifndef DP_HDCP_H
#define DP_HDCP_H

/**
 *
 *  \brief transmitter supported API (via mailbox)
 */
typedef enum
{
    HDCP_TX_CONFIGURATION,              /*!< use this command to set HDCP transmitter type and wake it up (or stop ), 1 byte with following bits :  Bit (0-1)= 0 - support only HDCP 2, 1 - support only HDCP 1, 2 - support both HDCP, Bit 2 - active (to activate port set to 1), to stop port set to 0 */
    HDCP2_TX_SET_PUBLIC_KEY_PARAMS,     /*!< use it to set public key for the HDCP2.x transmitter(HDCP2.x), Modulus n - 384 bytes,  E - 3 bytes */
    HDCP2_TX_SET_DEBUG_RANDOM_NUMBERS,  /*!< use this command to enforce  the random parameters (for debug only!), instead of the random data generated by the embedded RNG.Use this command after HDCP_TX_SET_PUBLIC_KEY_PARAMS command. Relevant to (HDCP2.x), data is : KM 16 bytes,RN 8 bytes,KS 16 bytes,RIV 8 bytes,RTX 8 bytes */
    HDCP2_TX_RESPOND_KM,                /*!< If km is stored, return all parameters, else there is no extra data(HDCP2.x), data is : Receiver ID (5 bytes),m (16 bytes),Km (16 bytes),Ekh(Km)(16 bytes) */
    HDCP1_TX_SEND_KEYS,                 /*!< send keys needed for HDCP 1, data is :  AKSV (5 bytes), ksv (7*40 = 280 bytes)*/
    HDCP1_TX_SEND_RANDOM_AN,            /*!< set AN, use it for debug purpose, if not use, it will be random number, data is (8 bytes) */
    HDCP_TX_STATUS_CHANGE,              /*!< Will be called in port status change event by cadence HDCP IP, Status for the port:Bit 0 - AUTHENTICATED (1 - link is authenticated), Bit 1 - receiver is REPEATER (1 for repeater, 0 not),Bit 2 - 0 for HDCP1, 1 for HDCP2,     */
    HDCP2_TX_IS_KM_STORED,              /*!< controller check if KM is stored by host(HDCP2.x), data is : Receiver ID (5 bytes) */
    HDCP2_TX_STORE_KM,                  /*!< controller ask host to store KM, host may store it on non-volatile memory for faster authentication(HDCP2.x), data is : Receiver ID (5 bytes),m (16 bytes),Km(16 bytes),Ekh(Km),(16 bytes) */
    HDCP_TX_IS_RECEIVER_ID_VALID,       /*!< controller check if receivers ID are not in revocation list, input is->first byte for number of receivers, then list of receivers (5 bytes each) */
    HDCP_TX_RESPOND_RECEIVER_ID_VALID,  /*!< If receivers ID are valid return 1, otherwise return 0, same for HDCP1,HDCP2*/
    HDCP_TX_TEST_KEYS,                  /*!< compare HDCP keys with facsimile key*/
    HDCP2_TX_SET_KM_KEY_PARAMS,         /*!< This Command is used to load customer defined Key for km-key encryption into the HDCP2.x transmitter controller. */
} HDCP_TRNAS_MAILBOX_MSG_ID;
/** @} */ /*  */

/* //////////////////////////////////////////////////////////////// */
/* HDCP ports mail box messages */
/* //////////////////////////////////////////////////////////////// */
typedef enum
{
    HDCP_GENERAL_SET_LC_128 = 0,
    HDCP_SET_SEED,
} HDCP_GENERAL_MSG;

#endif /*DP_HDCP_H_ */
