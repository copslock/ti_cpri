/*
 *  Copyright (C) 2017-2019 Texas Instruments Incorporated
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/**
 * \ingroup TISCI
 * \defgroup tisci_sa2ul_pka TISCI_SA2UL_PKA
 *
 * DMSC controls the power management, security and resource management
 * of the device.
 *
 *
 * @{
 */
/**
 *  \file   tisci_sa2ul_pka.h
 *
 *  \brief  This file contains:
 *
 *          WARNING!!: Autogenerated file from SYSFW. DO NOT MODIFY!!
 * System Firmware
 *
 * TISCI Data structures and macros for asymmetric key services using SA2UL PKA
 *
 */
#ifndef TISCI_SA2UL_PKA_H_
#define TISCI_SA2UL_PKA_H_

#include <ti/drv/sciclient/include/tisci/tisci_protocol.h>
#include <stdint.h>

/**
 * \brief Request to perform RSA signature primitive (RSASP1)
 *
 * \param key_index Index in keystore to access the private key for performing
 *                  the signature primitive
 * \param data_lo Lower 32-bit memory location of the plaintext data to sign
 * \param data_hi Upper 32-bit memory location of the plaintext data to sign
 * \param signature_lo Lower 32-bit memory location where the signature will be
 *                     placed upon successful completion
 * \param signature_hi Upper 32-bit memory location where the signature will be
 *                     placed upon successful completion
 */

struct tisci_msg_sa2ul_pka_rsa_sign_prim_req {
    uint8_t            key_index;
    uint32_t            data_lo;
    uint32_t            data_hi;
    uint32_t            signature_lo;
    uint32_t            signature_hi;
} __attribute__((__packed__));

/**
 * \brief Response to the RSA sign primitive request
 *
 *            signature was successful and contents were placed into the memory
 *            location provided by the host during the request. NACK response
 *            indicates that the signature was not able to be completed.
 */
struct tisci_msg_sa2ul_pka_rsa_sign_prim_resp {
} __attribute__((__packed__));

/**
 * \brief Request to perform RSA verification primitive (RSAVP1)
 *
 * \param key_index Index in keystore to access the public key for performing
 *                  the verification primitive
 * \param signature_lo Lower 32-bit memory location of the signature
 * \param signature_hi Upper 32-bit memory location of the signature
 * \param data_lo Lower 32-bit memory location where the plaintext data will be
 *                    placed upon successful completion
 * \param data_hi Upper 32-bit memory location where the plaintext data will be
 *                    placed upon successful completion
 */

struct tisci_msg_sa2ul_pka_rsa_verify_prim_req {
    uint8_t            key_index;
    uint32_t            signature_lo;
    uint32_t            signature_hi;
    uint32_t            data_lo;
    uint32_t            data_hi;
} __attribute__((__packed__));


/**
 * \brief Response to the RSA verify primitive request
 *
 *            verification was successful and contents were placed into the
 *            memory location provided by the host during the request. NACK
 *            response indicates that the verification was not able to be
 *            completed.
 */
struct tisci_msg_sa2ul_pka_rsa_verify_prim_resp {
} __attribute__((__packed__));

/**
 * \brief Request to perform RSA Encryption Primitive (RSAEP)
 *
 * \param key_index Index in keystore to access the public key for performing
 *                  the encryption primitive
 * \param data_lo Lower 32-bit memory location of the plaintext data
 * \param data_hi Upper 32-bit memory location of the plaintext data
 * \param cipher_lo Lower 32-bit memory location where the ciphertext data will
 *                  be placed upon successful completion
 * \param cipher_hi Upper 32-bit memory location where the ciphertext data will
 *                  be placed upon successful completion
 */

struct tisci_msg_sa2ul_pka_rsa_encrypt_prim_req {
    uint8_t            key_index;
    uint32_t            data_lo;
    uint32_t            data_hi;
    uint32_t            cipher_lo;
    uint32_t            cipher_hi;
} __attribute__((__packed__));


/**
 * \brief Response to the RSA encrypt primitive request
 *
 *            encryption was successful and contents were placed into the memory
 *            location provided by the host during the request. NACK response
 *            indicates that the encryption was not able to be completed.
 */
struct tisci_msg_sa2ul_pka_rsa_encrypt_prim_resp {
} __attribute__((__packed__));

/**
 * \brief Request to perform RSA Decryption Primitive (RSADP)
 *
 * \param key_index Index in keystore to access the private key for performing
 *                  the decryption primitive
 * \param cipher_lo Lower 32-bit memory location of the ciphertext data
 * \param cipher_hi Upper 32-bit memory location of the ciphertext data
 * \param data_lo Lower 32-bit memory location where the plaintext data will be
 *                placed upon successful completion
 * \param data_hi Upper 32-bit memory location where the plaintext data will be
 *                placed upon successful completion
 */

struct tisci_msg_sa2ul_pka_rsa_decrypt_prim_req {
    uint8_t            key_index;
    uint32_t            cipher_lo;
    uint32_t            cipher_hi;
    uint32_t            data_lo;
    uint32_t            data_hi;
} __attribute__((__packed__));

/**
 * \brief Response to the RSA decrypt primitive request
 *
 *            decryption was successful and contents were placed into the memory
 *            location provided by the host during the request. NACK response
 *            indicates that the decryption was not able to be completed.
 */
struct tisci_msg_sa2ul_pka_rsa_decrypt_prim_resp {
} __attribute__((__packed__));

/**
 * \brief Request to perform ECDSA signature
 *
 * \param key_index Index in keystore to access the private key for performing
 *                  the signature
 * \param input_lo Lower 32-bit memory location of the hashed message
 * \param input_hi Upper 32-bit memory location of the hashed message
 * \param signature_r_lo Lower 32-bit memory location where the r component of
 *                       the signature pair S = (r, s) will be placed upon
 *                       successful completion
 * \param signature_r_hi Upper 32-bit memory location of the r component of the
 *                       the signature pair S = (r, s) will be placed upon
 *                       successful completion
 * \param signature_s_lo Lower 32-bit memory location of the s component of the
 *                       the signature pair S = (r, s) will be placed upon
 *                       successful completion
 * \param signature_s_hi Upper 32-bit memory location of the s component of the
 *                       the signature pair S = (r, s) will be placed upon
 *                       successful completion
 */
struct tisci_msg_sa2ul_pka_ecdsa_sign_req {
    uint8_t            key_index;
    uint32_t            input_lo;
    uint32_t            input_hi;
    uint32_t            signature_r_lo;
    uint32_t            signature_r_hi;
    uint32_t            signature_s_lo;
    uint32_t            signature_s_hi;
} __attribute__((__packed__));

/**
 * \brief Response to the ECDSA signature request
 *
 *            signature was successful and contents were placed into the memory
 *            locations provided by the host during the request. NACK response
 *            indicates that the signature was not able to be completed.
 */
struct tisci_msg_sa2ul_pka_ecdsa_sign_resp {
} __attribute__((__packed__));

/**
 * \brief Request to perform ECDSA verification
 *
 * \param key_index Index in keystore to access the public key for performing
 *                  the verification
 * \param input_lo Lower 32-bit memory location of the hashed message
 * \param input_hi Upper 32-bit memory location of the hashed message
 * \param signature_r_lo Lower 32-bit memory location of the r component of the
 *                       signature pair S = (r, s)
 * \param signature_r_hi Upper 32-bit memory location of the r component of the
 *                       signature pair S = (r, s)
 * \param signature_s_lo Lower 32-bit memory location of the s component of the
 *                       signature pair S = (r, s)
 * \param signature_s_hi Upper 32-bit memory location of the s component of the
 *                       signature pair S = (r, s)
 */
struct tisci_msg_sa2ul_pka_ecdsa_verify_req {
    uint8_t            key_index;
    uint32_t            input_lo;
    uint32_t            input_hi;
    uint32_t            signature_r_lo;
    uint32_t            signature_r_hi;
    uint32_t            signature_s_lo;
    uint32_t            signature_s_hi;
} __attribute__((__packed__));

/**
 * \brief Response to the ECDSA verification request
 *
 *            verification was successful. NACK response indicates that the
 *            verfication was not successful.
 */
struct tisci_msg_sa2ul_pka_ecdsa_verify_resp {
} __attribute__((__packed__));

#endif /* TISCI_SA2UL_PKA_H_ */

/* @} */
