/*
 *  Copyright (C) 2017-2019 Texas Instruments Incorporated
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/**
 * \ingroup TISCI
 * \defgroup tisci_rm_irq TISCI Resource Management IRQ
 *
 * DMSC controls the power management, security and resource management
 * of the device.
 *
 *
 * @{
 */
/**
 *  \file   tisci_rm_irq.h
 *
 *  \brief  This file contains:
 *
 *          WARNING!!: Autogenerated file from SYSFW. DO NOT MODIFY!!
 * System Firmware TISCI RM IRQ Messaging
 *
 * TISCI Protocol Definitions for RM IRQ messages
 *
 */

#ifndef RM_TISCI_IRQ_H
#define RM_TISCI_IRQ_H

#include <ti/drv/sciclient/include/tisci/tisci_protocol.h>
#include <ti/drv/sciclient/include/tisci/rm/tisci_rm_shared.h>

/**
 * The dst_id parameter is valid for any RM IRQ TISCI message
 * modifying interrupt routes.
 */
#define TISCI_MSG_VALUE_RM_DST_ID_VALID                (1u << 0u)
/**
 * The dst_host_irq parameter is valid for any RM IRQ TISCI message
 * modifying interrupt routes.
 */
#define TISCI_MSG_VALUE_RM_DST_HOST_IRQ_VALID          (1u << 1u)
/**
 * The ia_id parameter is valid for any RM IRQ TISCI message
 * modifying routes through an interrupt aggregator virtual interrupt.
 */
#define TISCI_MSG_VALUE_RM_IA_ID_VALID                 (1u << 2u)
/**
 * The vint parameter is valid for any RM IRQ TISCI message
 * modifying routes through an interrupt aggregator virtual interrupt.
 */
#define TISCI_MSG_VALUE_RM_VINT_VALID                  (1u << 3u)
/**
 * The global_event parameter is valid for any RM IRQ TISCI message
 * modifying routes through an interrupt aggregator virtual interrupt.
 */
#define TISCI_MSG_VALUE_RM_GLOBAL_EVENT_VALID          (1u << 4u)
/**
 * The vint_status_bit_index parameter is valid for any RM IRQ TISCI message
 * modifying routes through an interrupt aggregator virtual interrupt.
 */
#define TISCI_MSG_VALUE_RM_VINT_STATUS_BIT_INDEX_VALID (1u << 5u)

/**
 * \brief Configures a peripheral to processor interrupt
 *
 * Configures peripherals within the interrupt subsystem according to the
 * valid configuration provided.  The following
 * @ref tisci_msg_rm_irq_set_req::valid_params valid bit combinations are
 * allowed:
 *
 * Non-Event Sourced Direct Interrupt - Non-event peripheral interrupt direct
 *                                      to destination processor.  One thing
 *                                      to note is an IA unmapped VINT route
 *                                      can be configured via this combination
 *                                      by passing the IA ID and VINT values
 *                                      as the src_id and src_index parameters.
 *                                      An IA unmapped VINT route is considered
 *                                      a non-event sourced direct interrupt
 *                                      route until a global event is mapped
 *                                      to the IA VINT:
 *   @ref tisci_msg_rm_irq_set_req::dst_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::dst_host_irq valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::ia_id valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_set_req::vint valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_set_req::global_event valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_set_req::vint_status_bit_index valid bit == SFALSE
 *
 * Event Sourced Direct Interrupt - Event-based peripheral interrupt direct
 *                                  to destination processor:
 *   @ref tisci_msg_rm_irq_set_req::dst_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::dst_host_irq valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::ia_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::vint valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::global_event valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::vint_status_bit_index valid bit == STRUE
 *
 * Unmapped VINT Direct Interrupt - Event-based peripheral interrupt direct to
 *                                  processor with no global event to VINT
 *                                  status bit mapping configured on allocation
 *                                  of the VINT.  Allows all event to VINT
 *                                  status bit mappings to take place at a
 *                                  later time:
 *   @ref tisci_msg_rm_irq_set_req::dst_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::dst_host_irq valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::ia_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::vint valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::global_event valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_set_req::vint_status_bit_index valid bit == SFALSE
 *
 * Event to VINT Mapping Only - Configure, or add a mapping to, an event-based
 *                              peripheral interrupt polled from IA VINT
 *                              real-time registers.  Can also be used to add
 *                              an event to VINT status bit mapping to an
 *                              event-based direct interrupt route:
 *   @ref tisci_msg_rm_irq_set_req::dst_id valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_set_req::dst_host_irq valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_set_req::ia_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::vint valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::global_event valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::vint_status_bit_index valid bit == STRUE
 *
 * OES Register Programming Only - Only programs the OES register of the
 *                                 source.  Useful for setting UDMAP trigger
 *                                 events and any other events that are not
 *                                 translated to the interrupt domain:
 *   @ref tisci_msg_rm_irq_set_req::dst_id valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_set_req::dst_host_irq valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_set_req::ia_id valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_set_req::vint valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_set_req::global_event valid bit == STRUE
 *   @ref tisci_msg_rm_irq_set_req::vint_status_bit_index valid bit == SFALSE
 *
 * The shortest route between the peripheral and the host processor that
 * satisfies the requirements for non-event and event direct interrupts is
 * programmed.  The host processor interrupt controller is not programmed
 * as part of the configuration.
 *
 * Standard TISCI header
 *
 * \param valid_params
 * Bitfield defining validity of interrupt route set parameters.  The
 * interrupt route set fields are not valid, and will not be used for route
 * set, if their corresponding valid bit is zero.  Valid bit usage:
 *   0 - Valid bit for @ref tisci_msg_rm_irq_set_req::dst_id
 *   1 - Valid bit for @ref tisci_msg_rm_irq_set_req::dst_host_irq
 *   2 - Valid bit for @ref tisci_msg_rm_irq_set_req::ia_id
 *   3 - Valid bit for @ref tisci_msg_rm_irq_set_req::vint
 *   4 - Valid bit for @ref tisci_msg_rm_irq_set_req::global_event
 *   5 - Valid bit for @ref tisci_msg_rm_irq_set_req::vint_status_bit_index
 *  31 - Valid bit for @ref tisci_msg_rm_irq_set_req::secondary_host
 *
 * \param src_id
 * ID of interrupt source peripheral
 *
 * \param src_index
 * Interrupt source index within source peripheral
 *
 * \param dst_id
 * SoC device ID of interrupt destination, based on the device architecture can
 * be an interrupt controller or processor.
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_DST_ID_VALID is set in
 * @ref tisci_msg_rm_irq_set_req::valid_params.
 *
 * \param dst_host_irq
 * Destination host processor interrupt controller IRQ input
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_DST_HOST_IRQ_VALID is set in
 * @ref tisci_msg_rm_irq_set_req::valid_params.
 *
 * \param ia_id
 * Device ID of interrupt aggregator in which the virtual interrupt resides.
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_IA_ID_VALID is set in
 * @ref tisci_msg_rm_irq_set_req::valid_params.
 *
 * \param vint
 * Virtual interrupt number if the interrupt route is through an
 * interrupt aggregator.
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_VINT_VALID is set in
 * @ref tisci_msg_rm_irq_set_req::valid_params.
 *
 * \param global_event
 * Global event mapped to interrupt aggregator virtual interrupt status bit.
 * The event is programmed into the OES register of the interrupt source.  This
 * field is only applicable for interrupt source's capable of generating
 * global events.
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_GLOBAL_EVENT_VALID is set in
 * @ref tisci_msg_rm_irq_set_req::valid_params.
 *
 * \param vint_status_bit_index
 * Virtual interrupt status bit to set if the interrupt route utilizes an
 * interrupt aggregator virtual interrupt.  The host processor uses the status
 * bit value within the interrupt aggregator's vint status register to find the
 * source event which triggered the interrupt.
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_VINT_STATUS_BIT_INDEX_VALID is set in
 * @ref tisci_msg_rm_irq_set_req::valid_params.
 *
 * \param secondary_host
 * The interrupt route destination is the specified secondary host if the
 * secondary_host's corresponding valid bit is set in
 * @ref tisci_msg_rm_irq_set_req::valid_params.  Otherwise, the host within the
 * TISCI message header is the route destination.
 */
struct tisci_msg_rm_irq_set_req {
    uint32_t            valid_params;
    uint16_t            src_id;
    uint16_t            src_index;
    uint16_t            dst_id;
    uint16_t            dst_host_irq;
    uint16_t            ia_id;
    uint16_t            vint;
    uint16_t            global_event;
    uint8_t            vint_status_bit_index;
    uint8_t            secondary_host;
} __attribute__((__packed__));

/**
 * \brief Response to setting a peripheral to processor interrupt.
 *
 * Standard TISCI header
 */
struct tisci_msg_rm_irq_set_resp {
} __attribute__((__packed__));

/**
 * \brief Releases a peripheral to processor interrupt
 *
 * Releases peripherals within the interrupt subsystem according to the
 * valid configuration provided.  The following
 * @ref tisci_msg_rm_irq_release_req::valid_params valid bit combinations are
 * allowed:
 *
 * Non-Event Sourced Direct Interrupt - Non-event peripheral interrupt direct
 *                                      to destination processor.  One thing
 *                                      to note is an IA unmapped VINT route
 *                                      can be released via this combination
 *                                      by passing the IA ID and VINT values
 *                                      as the src_id and src_index parameters.
 *                                      An IA unmapped VINT route is considered
 *                                      a non-event sourced direct interrupt
 *                                      route until a global event is mapped
 *                                      to the IA VINT:
 *   @ref tisci_msg_rm_irq_release_req::dst_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::dst_host_irq valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::ia_id valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_release_req::vint valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_release_req::global_event valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_release_req::vint_status_bit_index valid bit == SFALSE
 *
 * Event Sourced Direct Interrupt - Event-based peripheral interrupt direct
 *                                  to destination processor:
 *   @ref tisci_msg_rm_irq_release_req::dst_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::dst_host_irq valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::ia_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::vint valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::global_event valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::vint_status_bit_index valid bit == STRUE
 *
 * Unmapped VINT Direct Interrupt - Clear event-based interrupt direct to
 *                                  destination processor which does not have
 *                                  any existing event to VINT status bit
 *                                  mappings:
 *   @ref tisci_msg_rm_irq_release_req::dst_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::dst_host_irq valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::ia_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::vint valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::global_event valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_release_req::vint_status_bit_index valid bit == SFALSE
 *
 * Event to VINT Mapping Only - Clear only peripheral OES register and event to
 *                              VINT status bit mapping from direct to processor
 *                              and polled routes.  Event-based peripheral
 *                              interrupt polled routes are polled from the IA
 *                              VINT real-time registers.  For direct to
 *                              processor routes the entire route is NOT
 *                              released when the last event to VINT status bit
 *                              is unmapped using this valid bit combination.
 *                              This differs from using the Event Source Direct
 *                              Interrupt valid bit combination where the entire
 *                              route is released when the last event to VINT
 *                              status bit mapping is cleared.  The Unmapped
 *                              VINT Direct Interrupt valid bit combination is
 *                              used to clear an event sourced direct interrupt
 *                              with no existing event to VINT status bit
 *                              mappings:
 *   @ref tisci_msg_rm_irq_release_req::dst_id valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_release_req::dst_host_irq valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_release_req::ia_id valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::vint valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::global_event valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::vint_status_bit_index valid bit == STRUE
 *
 * OES Register Programming Only - Only clears the OES register of the
 *                                 source.  Useful for clearing UDMAP trigger
 *                                 events and any other events that are not
 *                                 translated to the interrupt domain:
 *   @ref tisci_msg_rm_irq_release_req::dst_id valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_release_req::dst_host_irq valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_release_req::ia_id valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_release_req::vint valid bit == SFALSE
 *   @ref tisci_msg_rm_irq_release_req::global_event valid bit == STRUE
 *   @ref tisci_msg_rm_irq_release_req::vint_status_bit_index valid bit == SFALSE
 *
 * Standard TISCI header
 *
 * \param valid_params
 * Bitfield defining validity of interrupt route release parameters.  The
 * interrupt route release fields are not valid, and will not be used
 * for route release, if their corresponding valid bit is zero.  Valid bit
 * usage:
 *   0 - Valid bit for @ref tisci_msg_rm_irq_release_req::dst_id
 *   1 - Valid bit for @ref tisci_msg_rm_irq_release_req::dst_host_irq
 *   2 - Valid bit for @ref tisci_msg_rm_irq_release_req::ia_id
 *   3 - Valid bit for @ref tisci_msg_rm_irq_release_req::vint
 *   4 - Valid bit for @ref tisci_msg_rm_irq_release_req::global_event
 *   5 - Valid bit for @ref tisci_msg_rm_irq_release_req::vint_status_bit_index
 *  31 - Valid bit for @ref tisci_msg_rm_irq_release_req::secondary_host
 *
 * \param src_id
 * ID of interrupt source peripheral
 *
 * \param src_index
 * Interrupt source index within source peripheral
 *
 * \param dst_id
 * SoC device ID of interrupt destination, based on the device architecture can
 * be an interrupt controller or processor.
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_DST_ID_VALID is set in
 * @ref tisci_msg_rm_irq_release_req::valid_params.
 *
 * \param dst_host_irq
 * Destination host processor interrupt controller IRQ input
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_DST_HOST_IRQ_VALID is set in
 * @ref tisci_msg_rm_irq_release_req::valid_params.
 *
 * \param ia_id
 * Device ID of interrupt aggregator in which the virtual interrupt resides.
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_IA_ID_VALID is set in
 * @ref tisci_msg_rm_irq_release_req::valid_params.
 *
 * \param vint
 * Virtual interrupt number if the interrupt route is through an
 * interrupt aggregator.
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_VINT_VALID is set in
 * @ref tisci_msg_rm_irq_release_req::valid_params.
 *
 * \param global_event
 * Global event mapped to interrupt aggregator virtual interrupt status bit.
 * The event is cleared from the OES register of the interrupt source.  This
 * field is only applicable for interrupt source's capable of generating
 * global events.
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_GLOBAL_EVENT_VALID is set in
 * @ref tisci_msg_rm_irq_release_req::valid_params.
 *
 * \param vint_status_bit_index
 * Virtual interrupt status bit to release if the interrupt route utilizes an
 * interrupt aggregator virtual interrupt.
 *
 * This field is only valid if
 * @ref TISCI_MSG_VALUE_RM_VINT_STATUS_BIT_INDEX_VALID is set in
 * @ref tisci_msg_rm_irq_release_req::valid_params.
 *
 * \param secondary_host
 * The interrupt route destination is the specified secondary host if the
 * secondary_host's corresponding valid bit is set in
 * @ref tisci_msg_rm_irq_release_req::valid_params.  Otherwise, the host within
 * the TISCI message header is the route destination.
 */
struct tisci_msg_rm_irq_release_req {
    uint32_t            valid_params;
    uint16_t            src_id;
    uint16_t            src_index;
    uint16_t            dst_id;
    uint16_t            dst_host_irq;
    uint16_t            ia_id;
    uint16_t            vint;
    uint16_t            global_event;
    uint8_t            vint_status_bit_index;
    uint8_t            secondary_host;
} __attribute__((__packed__));

/**
 * \brief Response to releasing a peripheral to processor interrupt.
 *
 * Standard TISCI header
 */
struct tisci_msg_rm_irq_release_resp {
} __attribute__((__packed__));

#endif /* RM_TISCI_IRQ_H */

/* @} */
