var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var SysStd = xdc.useModule('xdc.runtime.SysStd');
var SysMin = xdc.useModule('xdc.runtime.SysMin');

System.SupportProxy = SysStd;

var SemiHostsupport = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');

/* Load the OSAL package */ 
/*
var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;

var Uart 			= xdc.loadPackage('ti.drv.uart');
var I2c 			= xdc.loadPackage('ti.drv.i2c');
var Pruss 			= xdc.loadPackage('ti.drv.pruss');
var Gpio 			= xdc.loadPackage('ti.drv.gpio');

var deviceType           = "am437x";
var Csl 		= xdc.loadPackage('ti.csl');
Csl.Settings.deviceType  = deviceType;

var socType           = "am437x";

var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "idkAM437x";

var socType          = "am437x";
var Spi              = xdc.loadPackage('ti.drv.spi');
Spi.Settings.socType = socType;
*/

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 1048576;  /* 524288; */
BIOS.libType = BIOS.LibType_Debug;
BIOS.assertsEnabled = true;
BIOS.logsEnabled = true;
BIOS.cpuFreq.lo = 600000000;
BIOS.rtsGateType = BIOS.GateHwi;

SysMin.bufSize = 0x100;
System.SupportProxy = SysMin;

Defaults.common$.diags_INTERNAL = Diags.ALWAYS_ON;
Defaults.common$.diags_ASSERT = Diags.ALWAYS_ON;
Main.common$.diags_INFO = Diags.ALWAYS_ON;
Clock.tickPeriod = 500;

/* System stack size (used by ISRs and Swis) */
Program.stack = 32768;
/*
 * special memory management tells Sys/Bios link to ignore data sections
 * we will handle instead in .cmd file
 */

Task.defaultStackSize = 2048;
Task.idleTaskStackSize = 2048;

/* BIOS instances for our example */
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "switchReady";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.switchReady = Semaphore.create(null, semaphore0Params);
Program.sectMap[".c_int00"] = new Program.SectionSpec();
Program.sectMap[".c_int00"].loadAddress = 0x80000000;



/***********************************************
 *              MMU Configuration              *
 ***********************************************/
var Mmu = xdc.useModule('ti.sysbios.family.arm.a8.Mmu');
Mmu.enableMMU = true;



/* Force peripheral section to be NON cacheable strongly-ordered memory */
/*var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 0,
    bufferable : false,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : false,                // shareable
    noexecute  : true,                 // not executable
    domain     : 0,
    imp        : 1,
    accPerm    : 3, 
};

/* Define the base address of the 1 Meg page the peripheral resides in. */
/*var peripheralBaseAddr = 0x44e00400;

/* Configure the corresponding MMU page descriptor accordingly */
/*Mmu.setFirstLevelDescMeta(peripheralBaseAddr,
                          peripheralBaseAddr,
                          peripheralAttrs);

                          
/* Define the base address of the 1 Meg page the peripheral resides in. */
/*var peripheralBaseAddr = 0x481a6000;
0x40000000
/* Configure the corresponding MMU page descriptor accordingly */
/*Mmu.setFirstLevelDescMeta(peripheralBaseAddr,
                          peripheralBaseAddr,
                          peripheralAttrs);



/* Define the base address of the 1 Meg page the peripheral resides in. */
/*var peripheralBaseAddr = 0x4a300000;

/* Configure the corresponding MMU page descriptor accordingly */
/*Mmu.setFirstLevelDescMeta(peripheralBaseAddr,
                          peripheralBaseAddr,
                          peripheralAttrs);


/* Force peripheral section to be NON cacheable strongly-ordered memory */
var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 0,
    bufferable : false,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : false,                // shareable
    noexecute  : true,                 // not executable
};

/* Define the base address of the 1 Meg page the peripheral resides in. */
var peripheralBaseAddr = 0x44DF2800;

/* Configure the corresponding MMU page descriptor accordingly */
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);


/* Force peripheral section to be NON cacheable strongly-ordered memory */
var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 1,
    bufferable : false,                // bufferable
    cacheable  : true,                // cacheable
    shareable  : false,                // shareable
    noexecute  : false,                 // not executable
};

/* MMU configuration for QSPI CS0 Maddr1space - Cacheable */
var peripheralBaseAddr = 0x30000000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for QSPI CS0 Maddr1space - Cacheable */
var peripheralBaseAddr = 0x30100000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for QSPI CS0 Maddr1space - Cacheable */
var peripheralBaseAddr = 0x30200000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for QSPI CS0 Maddr1space - Cacheable */
var peripheralBaseAddr = 0x30300000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);


/* Force peripheral section to be NON cacheable strongly-ordered memory */
var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 1,
    bufferable : true,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : false,                // shareable
    noexecute  : false,                 // not executable
};

/* MMU configuration for PRCM - Non Cacheable | Bufferable : Device */
var peripheralBaseAddr = 0x44D00000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for Clock Module, PRM, GPIO0, UART0, I2C0, Non Cacheable | Bufferable : Device */
var peripheralBaseAddr = 0x44E00000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for QSPI MMR Maddr0space -Non Cacheable | Bufferable : Device */
var peripheralBaseAddr = 0x47900000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for UART1,UART2,I2C1,McSPI0,McASP0 CFG,McASP1 CFG,DMTIMER,GPIO1 - Non Cacheable | Bufferable Device */
var peripheralBaseAddr = 0x48000000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);


var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 0,
    bufferable : false,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : false,                // shareable
    noexecute  : false,                 // not executable
};

/* MMU configuration for I2C2,McSPI1,UART3,UART4,UART5, GPIO2,GPIO3,MMC1 - Non Cacheable | Non Bufferable : Strongly Ordered */
var peripheralBaseAddr = 0x48100000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);


var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 1,
    bufferable : true,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : false,                // shareable
    noexecute  : false,                 // not executable
};

/* MMU configuration for GPIO2,GPIO3,MMC1 - Non Cacheable | Non Bufferable : Strongly Ordered */
var peripheralBaseAddr = 0x481C0000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for  */
var peripheralBaseAddr = 0x48200000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for PWM - Non Cacheable | Bufferable : Device */
var peripheralBaseAddr = 0x48300000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for EDMA3CC - Non Cacheable | Bufferable : Device */
var peripheralBaseAddr = 0x49000000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for L4 FAST CFG- Non Cacheable | Bufferable : Device */
var peripheralBaseAddr = 0x4A000000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);

/* MMU configuration for CPSW -Non Cacheable | Bufferable : Device */
var peripheralBaseAddr = 0x4A100000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);


var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 1,
    bufferable : true,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : true,                // shareable
    noexecute  : false,                 // not executable
};

/* MMU configuration for PRU-ICSS0/1 -Non Cacheable | Bufferable : Shared Device */
var peripheralBaseAddr = 0x54400000; 
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);


var peripheralAttrs = {
    type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
    tex: 1,
    bufferable : true,                // bufferable
    cacheable  : false,                // cacheable
    shareable  : true,                // shareable
    noexecute  : false,                 // not executable
};

/* MMU configuration for //PRUSS1 -Bufferable| Non Cacheable | Shareable */
var peripheralBaseAddr = 0x40300000;  // Should it be bufferable??
Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs);
