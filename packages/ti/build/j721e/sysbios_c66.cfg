/* =============================================================================
 *   Copyright (c) Texas Instruments Incorporated 2018
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var Defaults  = xdc.useModule('xdc.runtime.Defaults');
var Diags     = xdc.useModule('xdc.runtime.Diags');
var Error     = xdc.useModule('xdc.runtime.Error');
var Log       = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main      = xdc.useModule('xdc.runtime.Main');
var Memory    = xdc.useModule('xdc.runtime.Memory');
var System    = xdc.useModule('xdc.runtime.System');
var Text      = xdc.useModule('xdc.runtime.Text');
var Clock     = xdc.useModule('ti.sysbios.knl.Clock');
var Task      = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var BIOS      = xdc.useModule('ti.sysbios.BIOS');
var Hwi       = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem   = xdc.useModule('ti.sysbios.heaps.HeapMem');
var SysMin    = xdc.useModule('xdc.runtime.SysMin');
var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var GateSwi = xdc.useModule('ti.sysbios.gates.GateSwi');

/* Enable EventCombiner for system interupts into C6x INTC */
var ECM = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');

/* Enable cache */
var Cache = xdc.useModule('ti.sysbios.hal.Cache');
var Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
Cache.initSize.l1pSize = Cache.L1Size_32K;
Cache.initSize.l1dSize = Cache.L1Size_32K;
Cache.initSize.l2Size  = Cache.L2Size_32K;
/* Enable cache for all DDR space - 0x80000000 to 0xFFFFFFFF (2GB space) */
Cache.setMarMeta(0x80000000, 0x80000000, Cache.Mar_ENABLE);

System.SupportProxy = SysMin;

/*
 * Program.argSize sets the size of the .args section.
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/* Create default heap and hook it into Memory */
var heapMemParams = new HeapMem.Params;
heapMemParams.size = 16384 * 3;
var heap0 = HeapMem.create(heapMemParams);

Memory.defaultHeapInstance = heap0;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger    = logger0;
Main.common$.diags_INFO    = Diags.ALWAYS_ON;

BIOS.libType = BIOS.LibType_Custom;
BIOS.cpuFreq.lo = 1350000000;
BIOS.cpuFreq.hi = 0;

var core = java.lang.System.getenv("CORE");

var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
DMTimer.checkFrequency = false;
for (var i=0; i < DMTimer.numTimerDevices; i++) {
    DMTimer.intFreqs[i].lo = 19200000;
    DMTimer.intFreqs[i].hi = 0;
}

/* DM timer cfg to get Task_sleep() working */
if(core=="c66xdsp_1")
{
    Clock.timerId = 0;
    DMTimer.timerSettings[0].eventId = 21;
}
if(core=="c66xdsp_2")
{
    Clock.timerId = 0;
    DMTimer.timerSettings[0].eventId = 20;
}
xdc.print("# !!!  Clock TimerId [" + Clock.timerId + "] !!!" );

/* Check if application needs to update with custom configuration options */
var cfgUpdate = java.lang.System.getenv("XDC_CFG_UPDATE")
if ((cfgUpdate != '')&&(cfgUpdate != null))
{
    xdc.print("Loading configuration update " + cfgUpdate);
    xdc.loadCapsule(cfgUpdate);
}


var Load = xdc.useModule('ti.sysbios.utils.Load');

/* load calculation related settings */
Load.swiEnabled   = true;
Load.hwiEnabled   = true;
Load.taskEnabled  = true;
Load.updateInIdle = false;
